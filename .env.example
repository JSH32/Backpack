# Port to serve on
# This will be exposed to the host from docker compose automatically
# This must be applied to ALL services if not using compose
PORT=3000

# --------------------------------------------------------------------------
#                               API and Client                              
# --------------------------------------------------------------------------

# Public URL of the API
API_URL=http://localhost:3000

# --------------------------------------------------------------------------
#                                     API                                   
# --------------------------------------------------------------------------

# Postgres database URI
DATABASE_URL=

# An invite code will be required to create an account 
INVITE_ONLY=false

# Sonyflake generator ID
# TODO: Replace this with IP address by default
WORKER_ID=0

# Key used to generate JWT tokens, this should be completely random
# Nothing bad will happen if this is changed but it is reccomended to avoid changing it
# Generate the key at https://onlinerandomtools.com/generate-random-string with a length of 64 and the "all" option
JWT_KEY=

# Public URL of the client
# This will usually be the same as API_URL if using compose
CLIENT_URL=http://localhost:3000

# --------------------------------- STORAGE --------------------------------

# How files should be stored
# Valid options are: local, s3
STORAGE_PROVIDER=local

# Public URL of where files are served
# This will be the same as the API_URL if using LOCAL_SERVE and PROXY_FILES
STORAGE_URL=http://localhost:3000

# ------------------------------ LOCAL STORAGE -----------------------------

# Path to store files
LOCAL_PATH=./uploads

# Serve files from the API
LOCAL_SERVE=true

# ------------------------------- S3 STORAGE -------------------------------

# All these options are designed to be configurable for any S3 API (minio, aws, google)
# For AWS, settings can be found at https://docs.aws.amazon.com/general/latest/gr/s3.html
S3_BUCKET=
S3_ACCESS_KEY=
S3_SECRET_KEY=
S3_REGION=
S3_ENDPOINT=

# ---------------------------------- SMTP ----------------------------------

# Should SMTP be used
# If enabled, users will be required to verify their email address after registration
SMTP_ENABLED=false

# SMTP server, for gmail this is: smtp.gmail.com
SMTP_SERVER=

# Username (email)
SMTP_USERNAME=

# Password
SMTP_PASSWORD=

# ---------------------------------- OAUTH ---------------------------------
# YOUR_API_URL in the Callback URL will be the same as CLIENT_URL if using the compose configuration.

# Google OAuth provider.
#
# Required scopes: https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/userinfo.profile
# Callback URL: YOUR_API_URL/api/auth/google/callback
GOOGLE_OAUTH_ENABLED=false
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# Github OAuth provider.
#
# Required scopes: user
# Callback URL: YOUR_API_URL/api/auth/github/callback
GITHUB_OAUTH_ENABLED=false
GITHUB_CLIENT_ID=
GITHUB_CLIENT_SECRET=

# Discord OAuth provider.
#
# Required scopes: identify, email
# Callback URL: YOUR_API_URL/api/auth/discord/callback
DISCORD_OAUTH_ENABLED=false
DISCORD_CLIENT_ID=
DISCORD_CLIENT_SECRET=

# --------------------------------------------------------------------------
#                                    NGINX                                  
# --------------------------------------------------------------------------

# This should be "on" if serving files through the API
# This is always the case if LOCAL_SERVE is true
# If serving files seperately or using S3 this should be "off"
PROXY_FILES=on

# --------------------------------------------------------------------------
#                                API and NGINX                              
# --------------------------------------------------------------------------

# File upload limit in megabytes
FILE_SIZE_LIMIT=100