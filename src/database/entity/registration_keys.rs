//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::{entity::prelude::*, Set};
use super::DB_SONYFLAKE;


#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "registration_keys")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(unique)]
    pub code: Uuid,
    pub expiry_date: Option<DateTimeUtc>,
    pub iss_user: String,
    pub used: i32,
    pub max_uses: i32,
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::IssUser",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}


impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(DB_SONYFLAKE.next_id().unwrap().to_string()),
            ..ActiveModelTrait::default()
        }
    }
}
