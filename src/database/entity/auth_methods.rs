//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use super::DB_SONYFLAKE;

use super::sea_orm_active_enums::AuthMethod;
use sea_orm::entity::prelude::*;
use sea_orm::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "auth_methods")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub user_id: String,
    pub auth_method: AuthMethod,
    #[sea_orm(column_type = "Text")]
    pub value: String,
    pub last_accessed: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(DB_SONYFLAKE.next_id().unwrap().to_string()),
            ..ActiveModelTrait::default()
        }
    }
}
