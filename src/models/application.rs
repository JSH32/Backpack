use serde::{Deserialize, Serialize};

use crate::database::entity::applications;

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct ApplicationData {
    pub id: String,
    pub name: String,

    #[serde(skip_serializing)]
    pub user_id: String,

    // Only send token when the token is originally created
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
}

impl From<applications::Model> for ApplicationData {
    fn from(application: applications::Model) -> Self {
        Self {
            id: application.id,
            name: application.name,
            user_id: application.user_id,
            // Token is generated by JWT with parameters, not stored in DB
            token: None,
        }
    }
}

#[derive(Serialize)]
pub struct TokenResponse {
    pub token: String,
}

#[derive(Deserialize)]
pub struct ApplicationCreateForm {
    pub name: String,
}
