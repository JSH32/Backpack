use sea_orm::prelude::DateTimeUtc;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

use crate::database::entity::applications;

#[derive(Serialize, ToSchema)]
#[serde(rename_all = "camelCase")]
pub struct ApplicationData {
    pub id: String,
    pub name: String,

    /// Last time the application was used for a request
    #[schema(value_type = String)]
    pub last_accessed: DateTimeUtc,

    /// User ID who owns the application
    pub user_id: String,

    /// Only sent when the token is originally created
    pub token: Option<String>,
}

impl From<applications::Model> for ApplicationData {
    fn from(application: applications::Model) -> Self {
        Self {
            id: application.id,
            name: application.name,
            user_id: application.user_id,
            last_accessed: application.last_accessed,
            // Token is generated by JWT with parameters, not stored in DB
            token: None,
        }
    }
}

/// Token data response
#[derive(Serialize, ToSchema)]
pub struct TokenResponse {
    pub token: String,
}

/// Application create request
#[derive(Deserialize, ToSchema)]
pub struct ApplicationCreate {
    pub name: String,
}
